// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protos/classify.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassificationServiceClient is the client API for ClassificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassificationServiceClient interface {
	ClassifyOneImage(ctx context.Context, in *ClassifyOneImageRequest, opts ...grpc.CallOption) (*ClassifyOneImageResponse, error)
}

type classificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassificationServiceClient(cc grpc.ClientConnInterface) ClassificationServiceClient {
	return &classificationServiceClient{cc}
}

func (c *classificationServiceClient) ClassifyOneImage(ctx context.Context, in *ClassifyOneImageRequest, opts ...grpc.CallOption) (*ClassifyOneImageResponse, error) {
	out := new(ClassifyOneImageResponse)
	err := c.cc.Invoke(ctx, "/classification_model.ClassificationService/ClassifyOneImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassificationServiceServer is the server API for ClassificationService service.
// All implementations must embed UnimplementedClassificationServiceServer
// for forward compatibility
type ClassificationServiceServer interface {
	ClassifyOneImage(context.Context, *ClassifyOneImageRequest) (*ClassifyOneImageResponse, error)
	mustEmbedUnimplementedClassificationServiceServer()
}

// UnimplementedClassificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassificationServiceServer struct {
}

func (UnimplementedClassificationServiceServer) ClassifyOneImage(context.Context, *ClassifyOneImageRequest) (*ClassifyOneImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyOneImage not implemented")
}
func (UnimplementedClassificationServiceServer) mustEmbedUnimplementedClassificationServiceServer() {}

// UnsafeClassificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassificationServiceServer will
// result in compilation errors.
type UnsafeClassificationServiceServer interface {
	mustEmbedUnimplementedClassificationServiceServer()
}

func RegisterClassificationServiceServer(s grpc.ServiceRegistrar, srv ClassificationServiceServer) {
	s.RegisterService(&ClassificationService_ServiceDesc, srv)
}

func _ClassificationService_ClassifyOneImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyOneImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassificationServiceServer).ClassifyOneImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/classification_model.ClassificationService/ClassifyOneImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassificationServiceServer).ClassifyOneImage(ctx, req.(*ClassifyOneImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassificationService_ServiceDesc is the grpc.ServiceDesc for ClassificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "classification_model.ClassificationService",
	HandlerType: (*ClassificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyOneImage",
			Handler:    _ClassificationService_ClassifyOneImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/classify.proto",
}
