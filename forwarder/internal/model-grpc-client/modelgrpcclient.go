package modelgrpcclient

import (
	"context"
	model "forwarder/internal/model/protos"
	"log"
	"time"

	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// NewGRPCClient creates a new grpc client with the given address and options.
//
// clientCreator is a function that creates a client from a grpc connection, usually generated by protoc.
func NewGRPCClient[T any](addr string, opts []grpc.DialOption, clientCreator func(conn grpc.ClientConnInterface) T) (*T, error) {
	conn, err := grpc.DialContext(context.Background(), addr, opts...)
	if err != nil {
		return nil, err
	}

	client := clientCreator(conn)

	return &client, nil
}

var (
	CompressModelClient model.ImageCompressServiceClient
	ClassifyModelClient model.ClassificationServiceClient
)

var modelDialOpts = []grpc.DialOption{
	grpc.WithTransportCredentials(insecure.NewCredentials()),
	grpc.WithChainUnaryInterceptor(retry.UnaryClientInterceptor(
		retry.WithMax(2),
		retry.WithPerRetryTimeout(time.Second),
		retry.WithBackoff(retry.BackoffExponentialWithJitter(200*time.Millisecond, 0.2)),
	)),
}

func InitCompressModelClient(addr string) (err error) {
	log.Printf("addr: %s", addr)
	client, err := NewGRPCClient(addr, modelDialOpts, model.NewImageCompressServiceClient)

	if err != nil {
		return err
	}

	CompressModelClient = *client

	return nil
}

func InitClassifyModelClient(addr string) (err error) {
	client, err := NewGRPCClient(addr, modelDialOpts, model.NewClassificationServiceClient)

	if err != nil {
		return err
	}

	ClassifyModelClient = *client

	return nil
}
