package modelgrpcclient

import (
	"context"
	model "forwarder/internal/model/protos"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// NewGRPCClient creates a new grpc client with the given address and options.
//
// clientCreator is a function that creates a client from a grpc connection, usually generated by protoc.
func NewGRPCClient[T any](addr string, opts []grpc.DialOption, clientCreator func(conn grpc.ClientConnInterface) T) (*T, error) {
	conn, err := grpc.DialContext(context.Background(), addr, opts...)
	if err != nil {
		return nil, err
	}

	client := clientCreator(conn)

	return &client, nil
}

var (
	CompressModelClient model.ImageCompressServiceClient
	ClassifyModelClient model.ClassificationServiceClient
)

var modelDialOpts = []grpc.DialOption{
	grpc.WithTransportCredentials(insecure.NewCredentials()),
	// set max message size to 100MB
	grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(100 * 1024 * 1024)),
	grpc.WithDefaultCallOptions(grpc.MaxCallSendMsgSize(100 * 1024 * 1024)),
}

func InitCompressModelClient(addr string) (err error) {
	client, err := NewGRPCClient(addr, modelDialOpts, model.NewImageCompressServiceClient)

	if err != nil {
		return err
	}

	CompressModelClient = *client

	return nil
}

func InitClassifyModelClient(addr string) (err error) {
	client, err := NewGRPCClient(addr, modelDialOpts, model.NewClassificationServiceClient)

	if err != nil {
		return err
	}

	ClassifyModelClient = *client

	return nil
}
